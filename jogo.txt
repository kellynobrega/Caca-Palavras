<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Caﾃｧa-Palavras</title>

  <link href="https://fonts.googleapis.com/css2?family=Fredoka&display=swap" rel="stylesheet" />

  <style>
    * {
      box-sizing: border-box;
    }
    body {
      font-family: 'Fredoka', sans-serif;
      background-color: #fdf6e3;
      margin: 0;
      padding: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    h1 {
      color: #ff6f61;
      font-size: 2em;
      margin-bottom: 10px;
      text-align: center;
    }
    .back-button, .restart-button {
      background: #ff99cc;
      border: none;
      padding: 10px 16px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 18px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.3);
      transition: background-color 0.3s;
      text-decoration: none;
      color: black;
      margin: 10px;
    }
    .back-button:hover, .restart-button:hover {
      background: #e066a1;
      color: white;
    }
    #buttons {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-bottom: 20px;
      flex-wrap: wrap;
    }
    #wordSearch {
      display: grid;
      grid-template-columns: repeat(12, 30px);
      grid-template-rows: repeat(12, 30px);
      gap: 2px;
      border: 2px solid #ccc;
      background-color: #fff;
      padding: 5px;
      touch-action: none;
    }
    .letter {
      display: flex;
      justify-content: center;
      align-items: center;
      width: 30px;
      height: 30px;
      border: 1px solid #eee;
      cursor: pointer;
      user-select: none;
      font-weight: bold;
      color: #444;
    }
    .selected {
      background-color: #a0d2eb;
    }
    .correct {
      background-color: #90ee90;
      cursor: default;
    }
    .wrong {
      color: red;
    }
    #wordList {
      margin-top: 20px;
      text-align: center;
    }
    #wordList p {
      display: inline-block;
      margin: 6px;
      padding: 6px 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      background: #fff;
    }
    .found {
      color: green;
      text-decoration: line-through;
      font-weight: bold;
    }
    #endScreen {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0, 0, 0, 0.95);
      color: white;
      z-index: 9999;
      justify-content: center;
      alignments: center;
      align-items: center;
      flex-direction: column;
      text-align: center;
    }
    #endScreen.show {
      display: flex;
    }
    #endScreen h2 {
      font-size: 2.5em;
      margin-bottom: 20px;
    }
    #endScreen button {
      padding: 12px 20px;
      font-size: 18px;
      background-color: #ff99cc;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      color: black;
      box-shadow: 0 2px 6px rgba(0,0,0,0.4);
    }
    #endScreen button:hover {
      background-color: #e066a1;
      color: white;
    }
    @media (max-width: 600px) {
      #wordSearch {
        grid-template-columns: repeat(12, 24px);
        grid-template-rows: repeat(12, 24px);
      }
      .letter {
        width: 24px;
        height: 24px;
        font-size: 14px;
      }
      h1 {
        font-size: 1.5em;
      }
    }
  </style>
</head>
<body>
  <h1 id="title">Caﾃｧa-Palavras</h1>
  <div id="buttons"
    <button class="restart-button" onclick="reiniciar()">煤 Reiniciar Jogo</button>
  </div>

  <div id="wordSearch"></div>
  <div id="wordList"></div>

  <!-- ﾃ「dios inseridos corretamente -->
  <audio id="correctSound" src="https://actions.google.com/sounds/v1/cartoon/wood_plank_flicks.ogg" preload="auto"></audio>
  <audio id="wrongSound" src="https://actions.google.com/sounds/v1/multimedia/computer_error.ogg" preload="auto"></audio>
  <audio id="applauseSound" src="https://www.soundjay.com/human/sounds/applause-8.mp3" preload="auto"></audio>

  <div id="endScreen">
    <h2>脂 Parabﾃｩns! Vocﾃｪ encontrou todas as palavras! 脂</h2>
    <button onclick="reiniciar()">Jogar Novamente</button>
  </div>

  <script>
    const todasPalavras = [
      "GATO","CACHORRO","VACA","PATO","CAVALO","COELHO","MACACO","LEﾃグ","TIGRE",
      "ELEFANTE","PEIXE","SAPO","URSO","ZEBRA","GIRAFA","PORCO","RATO","CORUJA",
      "ABELHA","ARARA","TUCANO","GALINHA","MICO","CAMELO","LAGARTO","PAVﾃグ","JAGUAR",
      "ONﾃ②", "HIPOPOTAMO", "PANDA", "GOLFINHO","PINGUIM","MORCEGO","FALCﾃグ","CROCODILO","ANDORINHA","OVELHA",
      "VERMELHO","AZUL","AMARELO","VERDE","ROSA","ROXO","PRETO","BRANCO","CINZA",
      "MARROM","BEGE","LILAS","LARANJA"
    ];

    const gridSize = 12;
    let selectedLetters = [];
    let foundWords = [];
    let currentWords = [];
    let isSelecting = false;
    let startCell = null;

    const correctSound = document.getElementById("correctSound");
    const wrongSound = document.getElementById("wrongSound");
    const applauseSound = document.getElementById("applauseSound");
    const endScreen = document.getElementById("endScreen");
    const title = document.getElementById("title");

    function reiniciar() {
      selectedLetters = [];
      foundWords = [];
      endScreen.classList.remove("show");
      currentWords = sortearPalavras();
      title.textContent = `Caﾃｧa-Palavras`;
      generateWordSearch();
    }

    function sortearPalavras() {
      const numeroDePalavras = 10;
      const palavrasSorteadas = [];
      while (palavrasSorteadas.length < numeroDePalavras) {
        const palavra = todasPalavras[Math.floor(Math.random() * todasPalavras.length)];
        if (!palavrasSorteadas.includes(palavra)) {
          palavrasSorteadas.push(palavra);
        }
      }
      return palavrasSorteadas;
    }

    function generateWordSearch() {
      const wordSearch = document.getElementById("wordSearch");
      wordSearch.innerHTML = "";
      const grid = Array(gridSize).fill(null).map(() => Array(gridSize).fill(""));

      placeWords(grid);
      fillEmptySpaces(grid);

      for (let i = 0; i < gridSize; i++) {
        for (let j = 0; j < gridSize; j++) {
          const letter = document.createElement("div");
          letter.classList.add("letter");
          letter.textContent = grid[i][j];
          letter.dataset.row = i;
          letter.dataset.col = j;
          letter.dataset.letter = grid[i][j];

          letter.addEventListener("mousedown", startSelection);
          letter.addEventListener("mouseenter", continueSelection);
          letter.addEventListener("mouseup", endSelection);
          letter.addEventListener("touchstart", startSelection, { passive: false });
          letter.addEventListener("touchmove", continueTouchSelection, { passive: false });
          letter.addEventListener("touchend", endSelection, { passive: false });

          wordSearch.appendChild(letter);
        }
      }

      displayWordList();
    }

    function placeWords(grid) {
      currentWords.forEach(word => {
        let placed = false;
        while (!placed) {
          const row = Math.floor(Math.random() * gridSize);
          const col = Math.floor(Math.random() * gridSize);
          const direction = Math.floor(Math.random() * 2);
          if (canPlaceWord(grid, word, row, col, direction)) {
            placeWord(grid, word, row, col, direction);
            placed = true;
          }
        }
      });
    }

    function canPlaceWord(grid, word, row, col, direction) {
      if (direction === 0) {
        if (col + word.length > gridSize) return false;
        for (let i = 0; i < word.length; i++) {
          if (grid[row][col + i] !== "" && grid[row][col + i] !== word[i]) return false;
        }
      } else {
        if (row + word.length > gridSize) return false;
        for (let i = 0; i < word.length; i++) {
          if (grid[row + i][col] !== "" && grid[row + i][col] !== word[i]) return false;
        }
      }
      return true;
    }

    function placeWord(grid, word, row, col, direction) {
      for (let i = 0; i < word.length; i++) {
        if (direction === 0) {
          grid[row][col + i] = word[i];
        } else {
          grid[row + i][col] = word[i];
        }
      }
    }

    function fillEmptySpaces(grid) {
      const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
      for (let i = 0; i < gridSize; i++) {
        for (let j = 0; j < gridSize; j++) {
          if (grid[i][j] === "") {
            grid[i][j] = alphabet[Math.floor(Math.random() * alphabet.length)];
          }
        }
      }
    }

    function displayWordList() {
      const wordList = document.getElementById("wordList");
      wordList.innerHTML = "";
      currentWords.forEach(word => {
        const wordElement = document.createElement("p");
        wordElement.textContent = word;
        wordList.appendChild(wordElement);
      });
    }

    function startSelection(e) {
      e.preventDefault();
      isSelecting = true;
      selectedLetters = [];
      const letter = e.target;
      const row = parseInt(letter.dataset.row);
      const col = parseInt(letter.dataset.col);
      startCell = { row, col };
      selectCell(letter);
    }

    function continueSelection(e) {
      if (!isSelecting) return;
      const letter = e.target;
      const row = parseInt(letter.dataset.row);
      const col = parseInt(letter.dataset.col);
      if (isStraightLine(startCell, { row, col })) {
        clearSelected();
        const cells = getCellsInLine(startCell, { row, col });
        cells.forEach(cell => selectCell(cell));
      }
    }

    function continueTouchSelection(e) {
      e.preventDefault();
      const touch = e.touches[0];
      const element = document.elementFromPoint(touch.clientX, touch.clientY);
      if (element && element.classList.contains("letter")) {
        continueSelection({ target: element });
      }
    }

    function endSelection() {
      isSelecting = false;
      checkWord();
    }

    function selectCell(cell) {
      cell.classList.add("selected");
      const row = parseInt(cell.dataset.row);
      const col = parseInt(cell.dataset.col);
      selectedLetters.push({ row, col, letter: cell.textContent, element: cell });
    }

    function clearSelected() {
      selectedLetters.forEach(l => l.element.classList.remove("selected"));
      selectedLetters = [];
    }

    function isStraightLine(start, end) {
      return start.row === end.row || start.col === end.col;
    }

    function getCellsInLine(start, end) {
      const cells = [];
      const rowStep = start.row === end.row ? 0 : (start.row < end.row ? 1 : -1);
      const colStep = start.col === end.col ? 0 : (start.col < end.col ? 1 : -1);
      let row = start.row;
      let col = start.col;
      while (row !== end.row || col !== end.col) {
        const cell = document.querySelector(`.letter[data-row="${row}"][data-col="${col}"]`);
        if (cell) cells.push(cell);
        row += rowStep;
        col += colStep;
      }
      const lastCell = document.querySelector(`.letter[data-row="${end.row}"][data-col="${end.col}"]`);
      if (lastCell) cells.push(lastCell);
      return cells;
    }

    function checkWord() {
      const selectedWord = selectedLetters.map(l => l.letter).join("");
      const reversedWord = selectedLetters.map(l => l.letter).reverse().join("");
      const wordListElements = document.querySelectorAll("#wordList p");

      if ((currentWords.includes(selectedWord) || currentWords.includes(reversedWord))
          && !foundWords.includes(selectedWord) && !foundWords.includes(reversedWord)) {
        correctSound.currentTime = 0;
        correctSound.play();
        const wordFound = currentWords.includes(selectedWord) ? selectedWord : reversedWord;
        foundWords.push(wordFound);

        selectedLetters.forEach(l => {
          l.element.classList.remove("selected");
          l.element.classList.add("correct");
        });

        selectedLetters = [];

        wordListElements.forEach(element => {
          if (foundWords.includes(element.textContent)) {
            element.classList.add("found");
          }
        });

        if (foundWords.length === currentWords.length) {
          setTimeout(() => {
            applauseSound.currentTime = 0;
            applauseSound.play();
            endScreen.classList.add("show");
          }, 500);
        }
      } else if (selectedLetters.length > 0) {
        wrongSound.currentTime = 0;
        wrongSound.play();
        selectedLetters.forEach(l => l.element.classList.add("wrong"));
        setTimeout(() => {
          selectedLetters.forEach(l => {
            l.element.classList.remove("wrong", "selected");
          });
          selectedLetters = [];
        }, 500);
      }
    }

    // Iniciar o jogo pela primeira vez
    reiniciar();
  </script>
</body>
</html>

